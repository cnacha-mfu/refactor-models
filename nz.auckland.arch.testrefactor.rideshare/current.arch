<?xml version="1.0" encoding="ASCII"?>
<arch:DesignModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arch="http://www.example.org/arch" name="current">
  <component name="PassengerUI" type="client,datawriter">
    <port name="call" role="//@connector.0/@role.0" type="request,OutboundPort">
      <events name="callride"/>
    </port>
    <port name="pay" role="//@connector.6/@role.0" type="write,OutboundPort">
      <events name="issuepay"/>
    </port>
    <port name="plogin" role="//@connector.3/@role.0" type="request,OutboundPort">
      <events name="login"/>
    </port>
  </component>
  <component name="TripMgmt" type="server,eventsource,datareader,readendpoint">
    <port name="accept" role="//@connector.0/@role.1 //@connector.1/@role.0 //@connector.2/@role.0" type="response,publish,read,OutboundPort,InboundPort,EventProcessorPort">
      <events name="acknowledged"/>
    </port>
  </component>
  <component name="DriverUI" type="client,eventconsumer,commandendpoint,viewdb,listener,datastore">
    <port name="notify" role="//@connector.1/@role.1" type="listen,InboundPort,EventProcessorPort">
      <events name="notified"/>
    </port>
    <port name="dlogin" role="//@connector.3/@role.0" type="request,OutboundPort">
      <events name="login"/>
    </port>
    <port name="locate" role="//@connector.5/@role.0" type="update,OutboundPort,EventProcessorPort">
      <events name="located"/>
    </port>
  </component>
  <component name="DriverRecord" type="commandendpoint,viewdb,datastore">
    <port name="driverquery" role="//@connector.2/@role.1" type="issue,query,InboundPort,EventProcessorPort">
      <events name="quried"/>
    </port>
    <port name="driverupdate" role="//@connector.5/@role.1" type="issue,query,InboundPort,EventProcessorPort">
      <events name="updated"/>
    </port>
  </component>
  <component name="Payment" type="repository,RuleSecureWriting,RuleSecureReading,datastore">
    <port name="record" role="//@connector.6/@role.1" type="store,InboundPort,TamperingProofPort">
      <events name="payrecorded"/>
    </port>
    <port name="list" role="//@connector.7/@role.1" type="access,InboundPort,TamperingProofPort">
      <events name="listed"/>
    </port>
  </component>
  <component name="BillingGateway" type="datareader,readendpoint">
    <port name="process" role="//@connector.7/@role.0" type="read,OutboundPort">
      <events name="processed"/>
    </port>
  </component>
  <component name="SignOn" type="server,datareader,readendpoint">
    <port name="auth" role="//@connector.3/@role.1 //@connector.4/@role.0" type="response,read,OutboundPort,InboundPort">
      <events name="authenticated"/>
    </port>
  </component>
  <component name="UserDB" type="repository,datastore">
    <port name="find" role="//@connector.4/@role.1" type="access,InboundPort">
      <events name="queried"/>
    </port>
  </component>
  <component name="AssignwireLog" type="eventlogger,datastore">
    <port name="logassign" role="//@connector.1/@role.2" type="log,InboundPort">
      <events name="logged"/>
    </port>
  </component>
  <component name="DriverupdatewireCommandLog" type="commanddb,datastore">
    <port name="logdriver" role="//@connector.5/@role.2" type="logcommand,InboundPort">
      <events name="logged"/>
    </port>
  </component>
  <connector name="callwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@connector.0"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@connector.2/@role.0" connector="//@connector.0"/>
  </connector>
  <connector name="assignwire" type="ESConnector" connectortype="//@archstyle.2/@connectortype.0">
    <role name="eventpublisher" roletype="//@archstyle.2/@connectortype.0/@roletype.0" type="out" connector="//@connector.1"/>
    <role name="eventsubscriber" roletype="//@archstyle.2/@connectortype.0/@roletype.1" type="in" connector="//@connector.1"/>
    <role name="eventstore" roletype="//@archstyle.2/@connectortype.0/@roletype.2" type="in" connector="//@connector.1"/>
  </connector>
  <connector name="driverquerywire" type="QRConnector" connectortype="//@archstyle.7/@connectortype.0">
    <role name="querier" roletype="//@archstyle.7/@connectortype.0/@roletype.0" type="out" nextRoleExpr="//@connector.1/@role.0" connector="//@connector.2"/>
    <role name="readstore" roletype="//@archstyle.7/@connectortype.0/@roletype.1" type="in" connector="//@connector.2"/>
  </connector>
  <connector name="authwire" type="CSConnector" connectortype="//@archstyle.0/@connectortype.0">
    <role name="requester" roletype="//@archstyle.0/@connectortype.0/@roletype.0" type="out" connector="//@connector.3"/>
    <role name="responder" roletype="//@archstyle.0/@connectortype.0/@roletype.1" type="in" nextRoleExpr="//@connector.4/@role.0" connector="//@connector.3"/>
  </connector>
  <connector name="userquerywire" type="REConnector" connectortype="//@archstyle.5/@connectortype.0">
    <role name="reader" roletype="//@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@connector.4"/>
    <role name="readstorage" roletype="//@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@connector.4"/>
  </connector>
  <connector name="driverupdatewire" type="CRConnector" connectortype="//@archstyle.3/@connectortype.0">
    <role name="commander" roletype="//@archstyle.3/@connectortype.0/@roletype.1" type="out" connector="//@connector.5"/>
    <role name="readstore" roletype="//@archstyle.3/@connectortype.0/@roletype.0" type="in" connector="//@connector.5"/>
    <role name="commandstore" roletype="//@archstyle.3/@connectortype.0/@roletype.2" type="in" connector="//@connector.5"/>
  </connector>
  <connector name="paywire" type="WRConnector" connectortype="//@archstyle.4/@connectortype.0">
    <role name="writer" roletype="//@archstyle.4/@connectortype.0/@roletype.0" type="out" connector="//@connector.6"/>
    <role name="writestorage" roletype="//@archstyle.4/@connectortype.0/@roletype.1" type="in" connector="//@connector.6"/>
  </connector>
  <connector name="billwire" type="REConnector" connectortype="//@archstyle.5/@connectortype.0">
    <role name="reader" roletype="//@archstyle.5/@connectortype.0/@roletype.0" type="out" connector="//@connector.7"/>
    <role name="readstorage" roletype="//@archstyle.5/@connectortype.0/@roletype.1" type="in" connector="//@connector.7"/>
  </connector>
  <archstyle name="client-server">
    <connectortype name="CSConnector">
      <roletype name="requester" porttype="//@archstyle.0/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.0/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.0/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="responder" porttype="//@archstyle.0/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="invoke" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.2"/>
        <event name="process" next="//@archstyle.0/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.0/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="client">
      <porttype name="request"/>
    </componenttype>
    <componenttype name="server">
      <porttype name="response"/>
    </componenttype>
  </archstyle>
  <archstyle name="reverse-oracle">
    <connectortype name="ROConnector">
      <roletype name="extquerier" porttype="//@archstyle.1/@componenttype.0/@porttype.0">
        <event name="request" next="//@archstyle.1/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="uid" next="//@archstyle.1/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.1/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.1/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="process" next="//@archstyle.1/@connectortype.0/@roletype.0/@event.4"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="blocksupplier" porttype="//@archstyle.1/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="uid" next="//@archstyle.1/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process" next="//@archstyle.1/@connectortype.0/@roletype.1/@event.2"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.1/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="reverseoracle">
      <porttype name="blockquery"/>
    </componenttype>
    <componenttype name="blockchain">
      <porttype name="blocksupply"/>
    </componenttype>
  </archstyle>
  <archstyle name="event-sourcing">
    <connectortype name="ESConnector">
      <roletype name="eventpublisher" porttype="//@archstyle.2/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="pevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.2/@event.0"/>
        <event xsi:type="arch:Channel" name="sevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.4" type="input"/>
        <event xsi:type="arch:Channel" name="bevt" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.5" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.1/@event.0"/>
        <event name="broadcast" next="//@archstyle.2/@connectortype.0/@roletype.0/@event.3"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="eventsubscriber" porttype="//@archstyle.2/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="bevt" next="//@archstyle.2/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process"/>
      </roletype>
      <roletype name="eventstore" porttype="//@archstyle.2/@componenttype.2/@porttype.0">
        <event xsi:type="arch:Channel" name="pevt" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.1" type="input"/>
        <event name="process" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.3"/>
        <event xsi:type="arch:Channel" name="sevt" type="output" bind="//@archstyle.2/@connectortype.0/@roletype.0/@event.2"/>
        <event name="persist" next="//@archstyle.2/@connectortype.0/@roletype.2/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="eventsource">
      <porttype name="publish"/>
    </componenttype>
    <componenttype name="eventconsumer">
      <porttype name="listen"/>
    </componenttype>
    <componenttype name="eventlogger">
      <porttype name="log"/>
    </componenttype>
  </archstyle>
  <archstyle name="command-responsibility">
    <connectortype name="CRConnector">
      <roletype name="readstore" porttype="//@archstyle.3/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.3/@connectortype.0/@roletype.0/@event.1" type="input"/>
        <event name="process" next="//@archstyle.3/@connectortype.0/@roletype.0/@event.2"/>
        <event name="persist"/>
      </roletype>
      <roletype name="commander" porttype="//@archstyle.3/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.3/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.3/@connectortype.0/@roletype.1/@event.2" type="output" bind="//@archstyle.3/@connectortype.0/@roletype.0/@event.0"/>
        <event name="Skip"/>
        <event xsi:type="arch:Channel" name="cmmd" next="//@archstyle.3/@connectortype.0/@roletype.1/@event.1" type="output" bind="//@archstyle.3/@connectortype.0/@roletype.2/@event.0"/>
      </roletype>
      <roletype name="commandstore" porttype="//@archstyle.3/@componenttype.2/@porttype.0">
        <event xsi:type="arch:Channel" name="cmmd" next="//@archstyle.3/@connectortype.0/@roletype.2/@event.1" type="input"/>
        <event name="process" next="//@archstyle.3/@connectortype.0/@roletype.2/@event.2"/>
        <event name="persist"/>
      </roletype>
    </connectortype>
    <componenttype name="commandendpoint">
      <porttype name="issue"/>
    </componenttype>
    <componenttype name="viewdb">
      <porttype name="update"/>
    </componenttype>
    <componenttype name="commanddb">
      <porttype name="logcommand"/>
    </componenttype>
  </archstyle>
  <archstyle name="repository-write">
    <connectortype name="WRConnector">
      <roletype name="writer" porttype="//@archstyle.4/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.4/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.4/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.4/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.4/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="writestorage" porttype="//@archstyle.4/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.4/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="invoke" next="//@archstyle.4/@connectortype.0/@roletype.1/@event.2"/>
        <event name="process" next="//@archstyle.4/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.4/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="datawriter">
      <porttype name="write"/>
    </componenttype>
    <componenttype name="repository">
      <porttype name="store"/>
    </componenttype>
  </archstyle>
  <archstyle name="repository-read">
    <connectortype name="REConnector">
      <roletype name="reader" porttype="//@archstyle.5/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.5/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.5/@connectortype.0/@roletype.0/@event.3" type="input"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="readstorage" porttype="//@archstyle.5/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="req" next="//@archstyle.5/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="invoke" next="//@archstyle.5/@connectortype.0/@roletype.1/@event.2"/>
        <event name="process" next="//@archstyle.5/@connectortype.0/@roletype.1/@event.3"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.5/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="datareader">
      <porttype name="read"/>
    </componenttype>
    <componenttype name="repository">
      <porttype name="access"/>
    </componenttype>
  </archstyle>
  <archstyle name="publish-subscribe">
    <connectortype name="PSConnector" eaConnector="//@archstyle.0/@connectortype.0">
      <roletype name="publisher" porttype="//@archstyle.6/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.1"/>
        <event xsi:type="arch:Channel" name="pub" next="//@archstyle.6/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.6/@connectortype.0/@roletype.1/@event.0"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="subscriber" porttype="//@archstyle.6/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="pub" next="//@archstyle.6/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process"/>
      </roletype>
    </connectortype>
    <componenttype name="broadcaster">
      <porttype name="broadcast"/>
    </componenttype>
    <componenttype name="listener">
      <porttype name="listen"/>
    </componenttype>
  </archstyle>
  <archstyle name="query-responsibility">
    <connectortype name="QRConnector">
      <roletype name="querier" porttype="//@archstyle.7/@componenttype.0/@porttype.0">
        <event name="process" next="//@archstyle.7/@connectortype.0/@roletype.0/@event.3"/>
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.7/@connectortype.0/@roletype.0/@event.2" type="output" bind="//@archstyle.7/@connectortype.0/@roletype.1/@event.0"/>
        <event xsi:type="arch:Channel" name="res" next="//@archstyle.7/@connectortype.0/@roletype.0/@event.0" type="input"/>
        <event name="Skip"/>
      </roletype>
      <roletype name="readstore" porttype="//@archstyle.7/@componenttype.1/@porttype.0">
        <event xsi:type="arch:Channel" name="stmt" next="//@archstyle.7/@connectortype.0/@roletype.1/@event.1" type="input"/>
        <event name="process" next="//@archstyle.7/@connectortype.0/@roletype.1/@event.2"/>
        <event xsi:type="arch:Channel" name="res" type="output" bind="//@archstyle.7/@connectortype.0/@roletype.0/@event.2"/>
      </roletype>
    </connectortype>
    <componenttype name="readendpoint">
      <porttype name="read"/>
    </componenttype>
    <componenttype name="viewdb">
      <porttype name="query"/>
    </componenttype>
  </archstyle>
  <archstyle name="oracle">
    <connectortype name="IOConnector">
      <roletype name="blockstorage" porttype="//@archstyle.8/@componenttype.0/@porttype.0">
        <event xsi:type="arch:Channel" name="token" next="//@archstyle.8/@connectortype.0/@roletype.0/@event.1" type="input"/>
        <event name="process" next="//@archstyle.8/@connectortype.0/@roletype.0/@event.2"/>
        <event name="stored"/>
      </roletype>
      <roletype name="extsupplier" porttype="//@archstyle.8/@componenttype.1/@porttype.0">
        <event name="process" next="//@archstyle.8/@connectortype.0/@roletype.1/@event.1"/>
        <event xsi:type="arch:Channel" name="token" type="output" bind="//@archstyle.8/@connectortype.0/@roletype.0/@event.0"/>
      </roletype>
    </connectortype>
    <componenttype name="blockchain">
      <porttype name="bcstore"/>
    </componenttype>
    <componenttype name="oracle">
      <porttype name="orafeed"/>
    </componenttype>
  </archstyle>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop1" model="/" visitedStates="197" verifyTime="0.0527315" testport="//@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!10 -> callwire_req?10 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!10 -> driverquerywire_stmt?10 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!10 -> driverquerywire_res?10 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!10 -> assignwire_pevt?10 -> AssignwireLog_logassign_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!10 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?10 -> assignwire_bevt!10 -> assignwire_bevt?10 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!10 -> callwire_res?10" exprText="[]  (PassengerUI.call.callride -> &lt;> DriverUI.notify.notified)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.0">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.0/@port.0/@events.0" nextExpr="//@verifyProperty.0/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.2/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop2" model="/" visitedStates="131" verifyTime="0.0510922" testport="//@component.0/@port.0" traceExample="init -> PassengerUI_call_callride -> PassengerUI_callwire_requester_process -> callwire_req!50 -> callwire_req?50 -> TripMgmt_callwire_responder_invoke -> TripMgmt_accept_acknowledged -> TripMgmt_driverquerywire_querier_process -> driverquerywire_stmt!50 -> driverquerywire_stmt?50 -> DriverRecord_driverquery_quried -> DriverRecord_driverquerywire_readstore_process -> driverquerywire_res!50 -> driverquerywire_res?50 -> TripMgmt_driverquerywire_querier_Skip -> TripMgmt_assignwire_eventpublisher_process -> assignwire_pevt!50 -> assignwire_pevt?50 -> AssignwireLog_logassign_logged -> AssignwireLog_assignwire_eventstore_process -> assignwire_sevt!50 -> AssignwireLog_assignwire_eventstore_persist -> assignwire_sevt?50 -> assignwire_bevt!50 -> assignwire_bevt?50 -> DriverUI_notify_notified -> DriverUI_assignwire_eventsubscriber_process -> TripMgmt_assignwire_eventpublisher_broadcast -> TripMgmt_assignwire_eventpublisher_Skip -> TripMgmt_callwire_responder_process -> callwire_res!50 -> callwire_res?50" exprText="[]  (TripMgmt.accept.acknowledged -> &lt;> DriverRecord.driverquery.quried)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.1">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.1/@port.0/@events.0" nextExpr="//@verifyProperty.1/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.3/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop3" model="/" counterExample="" visitedStates="10" verifyTime="0.0050953" testport="//@component.0/@port.1" traceExample="init -> PassengerUI_pay_issuepay -> PassengerUI_paywire_writer_process -> paywire_req!64 -> paywire_req?64 -> Payment_paywire_writestorage_invoke -> Payment_record_payrecorded -> Payment_paywire_writestorage_process -> paywire_res!64 -> paywire_res?64" exprText="[]  (BillingGateway.process.processed -> &lt;> Payment.list.listed)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.2">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.5/@port.0/@events.0" nextExpr="//@verifyProperty.2/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.4/@port.1/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop4" model="/" visitedStates="24" verifyTime="0.0422349" testport="//@component.0/@port.2" traceExample="init -> PassengerUI_plogin_login -> PassengerUI_authwire_requester_process -> authwire_req!38 -> authwire_req?38 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!38 -> userquerywire_req?38 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!38 -> userquerywire_res?38 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!38 -> authwire_res?38" exprText="[]  (PassengerUI.plogin.login -> &lt;> SignOn.auth.authenticated)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.3">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.0/@port.2/@events.0" nextExpr="//@verifyProperty.3/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.6/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <verifyProperty xsi:type="arch:BehaviourProperty" name="prop5" model="/" visitedStates="29" verifyTime="0.0046748" testport="//@component.2/@port.1" traceExample="init -> DriverUI_dlogin_login -> DriverUI_authwire_requester_process -> authwire_req!32 -> authwire_req?32 -> SignOn_authwire_responder_invoke -> SignOn_auth_authenticated -> SignOn_userquerywire_reader_process -> userquerywire_req!32 -> userquerywire_req?32 -> UserDB_userquerywire_readstorage_invoke -> UserDB_find_queried -> UserDB_userquerywire_readstorage_process -> userquerywire_res!32 -> userquerywire_res?32 -> SignOn_userquerywire_reader_Skip -> SignOn_authwire_responder_process -> authwire_res!32 -> authwire_res?32" exprText="[]  (DriverUI.dlogin.login -> &lt;> UserDB.find.queried)">
    <ltlexpr xsi:type="arch:LTLNestedExpr" operator="ALWAYS" property="//@verifyProperty.4">
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.2/@port.1/@events.0" nextExpr="//@verifyProperty.4/@ltlexpr.0/@expr.1"/>
      <expr xsi:type="arch:LTLRegularExpr" event="//@component.7/@port.0/@events.0" operator="EVENTUALLY"/>
    </ltlexpr>
  </verifyProperty>
  <ontologylabel name="EventProcessorPort" subClassOf="Port"/>
  <ontologylabel name="RuleSecureWriting" expression="repository and (hasPort some  (TamperingProofPort and (hasAttachment some writestorage)))" subClassOf="RefactorRule"/>
  <ontologylabel name="RuleEventCommand" expression="WRConnector and (hasRole some (writer and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
  <ontologylabel name="RuleEventCentre" expression="PSConnector and (hasRole some  (Role and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
  <ontologylabel name="RuleEventQuery" expression="REConnector and (hasRole some (reader and (isAttachmentOf some EventProcessorPort)))" subClassOf="RefactorRule"/>
  <ontologylabel name="RuleSecureReading" expression="repository and (hasPort some (TamperingProofPort and (hasAttachment some readstorage)))" subClassOf="RefactorRule"/>
  <ontologylabel name="TamperingProofPort" subClassOf="Port"/>
  <ontologylabel name="datastore" expression="blockchain or repository or eventlogger or commanddb or viewdb or blockchain"/>
</arch:DesignModel>
